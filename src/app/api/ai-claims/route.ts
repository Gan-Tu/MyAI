// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import { getLanguageModel } from '@/lib/models';
import { checkRateLimit } from '@/lib/redis';
import { claimsSchema } from '@/lib/schema';
import { LanguageModel, streamObject } from 'ai';
import { NextResponse } from 'next/server';

// Allow streaming responses up to 30 seconds
export const maxDuration = 30;

const systemPrompt = `

`

export async function POST(req: Request) {
  const context = await req.json();
  const headers = req.headers;
  const modelChoice = headers.get('X-AI-Model') || 'gpt-4o-mini'

  let { passed, secondsLeft } = await checkRateLimit("/api/ai-claims")
  if (!passed) {
    return NextResponse.json({
      error: `Rate Limited. ${secondsLeft && `${secondsLeft}s left`}.`
    }, { status: 429 })
  }

  let model: LanguageModel | null = null;
  try {
    model = getLanguageModel(modelChoice)
  } catch (error) {
    console.error(error)
    return NextResponse.json({ error: (error as Error).message }, { status: 400 })
  }

  const result = await streamObject({
    model: model,
    schema: claimsSchema,
    system: Buffer.from(systemPrompt.trim(), 'base64').toString('utf-8'),
    prompt: context.trim(),
  })
  return result.toTextStreamResponse();
}